testInt: int = 0
testFloat: float = 0.0
testStr: str = "test"
testBool: bool = true
testList: list = [1, 2, 3]
testMap: map = {"a": 1, "b": 2}
testAny: any = "test"
testVoid: void = null
testNull: null = null
testObject: object = object Object: end
testFunction: function = fun test() -> int: return 0 end
testFunctionWithArgs: function = fun test(a: int, b: int) -> int: return a + b end
testFunctionWithDefaultArgs: function = fun test(a: int, b: int, c: int=10) -> int: return a + b + c end
testVariableFinal: int | final = 0
testVariableStatic: int | static = 0
testVariablePublic: int | public = 0
testVariablePrivate: int | private = 0
testVariableMutable: int | mutable = 0
testVariableNonStatic: int | non-static = 0
testVariableAllMods: int | public static final = 0


public static final fun test() -> int: return 0 end

private static final fun youCantCallMeLol() -> int: print("you cant call me lol") end

public static final fun youCanCallMe() -> int: print("you can call me") return 0 end

public static final fun testIndex() -> void:
    l: list = [1, 2, 3]
    m: map = {"a": 1, "b": 2}

    print(l[0])
    print(m["a"])

    m["c"] = 3

    print(m["c"])
    print(m["a"] + m["b"] + m["c"])

    forget m["c"]

    print(len(m))

    return null
end

public static final fun testFString() -> void:
    a: int = 1
    b: int = 2
    c: str = "test"
    d: float = 3.14

    print(f"Expected: 1; 2; test; 3.14 Got: {a}; {b}; {c}; {d}")

    return null
end

public static final fun testFunctionCalls() -> int:
    private static mutable fun t() -> int:
        return 0
    end
    print(t())
    fun t(a, b) -> int:
        return a + b
    end
    print(t(2, 5))
    fun t(a, b=5) -> int:
        return a + b
    end
    print(t(2))
    fun t(a=2, b=5) -> int:
        return a + b
    end
    print(t())
    return 0
end

public static final fun testImports() -> void:
	import config

	envPath: str = config.get("home_dir", "")

	import math as m
	import isPrime from "Docs/examples/isPrime.lc"
	print(m.sqrt(4))
	print(m.PI)

	print(isPrime.isPrime(5))

	import bubbleSort from "Docs/examples/bubbleSort.lc" as bl

	arr: list = [64, 34, 25, 12, 22, 11, 90]
	print(bl.bubbleSort(arr))

	print(config.get_config("home_dir", ""))
	print(config.debug)
	return null
end

public static final fun testLibs() -> int:
    import config
    import math
    import random
    import os
    import console
    import python

    // config
    print(config.get("debug"))

    // math
    print(math.sqrt(4))
    print(math.PI)

    // random
    print(random.randint(0, 100))
    print(random.choice([1, 2, 3, 4, 5]))
    print(random.shuffle([1, 2, 3, 4, 5]))
    print(random.seed(10))

    // os
    print(os.getcwd())

    // console
    print(console.info("test"))

    // python
    print(python.pyeval("print('hello from python')"))
    print(python.pyexec("print('hello from python')"))
    print(python.pybool(null))
    print(python.pytype(1))
    print(python.pytype(1.0))

    return 0
end

public static final fun testOperators() -> void:
    a: int = 1
    b: int = 2
    l: list = [1, 2, 3]
    m: map = {"a": 1, "b": 2}

    print(a >= b)
    print(a <= b)
    print(a == b)
    print(a != b)
    print(a += b)
    print(a -= b)
    print(a *= b)
    print(a /= b)
    print(a + b)
    print(a - b)
    print(a ^ b)
    print(a * b)
    print(a / b)
    print(a > b)
    print(a < b)
    print(!a)
    print(a % b)
    print(a || b)
    print(a && b)
    print(|-a|)
    print(a ~ l)
    print(a ~ m)

    print(a in l)
    print(a in m)
    print(a or l)
    print(a and l)
    print(not a)
    print(a isn't b)
    print(a isnt b)
    print(a is b)
    print(a xor b)
    print(a xnor b)
    print(a nein b)
    print(nein a)

    return null
end

public static final fun testIterative(n: int) -> int:
	i: int = 0
	while (i < n):
		i += 1
	end
	for (j in [0...n]):
		i += j
	end
	return i
end

public static final fun testRecursive(n: int) -> int:
	if (n == 0):
		return 0
	end
	return n + test_recursive(n - 1)
end

public static final fun testAll() -> int:
    // tests many features of the language
    #alias function -> fun
    function testFunction() -> int: return 0 end
    test()
    #del function
    #config debug = true
    #config debug reset
    i: int = 0
    try:
        i = "a"
    end catch (e):
        print(e)
    end
    print(testOperators())
    print(testLibs())
    print(testFunctionCalls())
    print(testFunction())
    print(testIndex())
    print(testFString())
    testImports()
    forget i
    i: any = "test"
    print(i)
    print(i + "ing")
    print(0 > -1)
    print(0 < -1)
    for (i in [0...10]):
        print(i)
    end
    m = {}
    m["a"] = 1
    m["b"] = 2
    print(m["a"])
    print(m["b"])
    print(m)
    Exception TestException
    Warning TestWarning
    try:
		throw "test" from TestException
	end catch (e):
		print(e)
		print(e.__type__)
	end
	throw "TEST WARNING" from TestWarning
    try:
        throw "test"
    end catch (e):
        print(e)
    end
    if (true):
        print("true")
    end else:
        print("false")
    end
    while (i < 10):
        i += 1
    end
    print(i)
    with (TestContext()) as tc:
        print(tc)
        print("test")
    end
    import math
    print(math.sqrt(4))
    print(math.PI)
    object O: end
    // comment
    /* comment
    multiline */
    public static final fun args_test(a: int, b: int, c: int=10) -> int:
        print(a)
        print(b)
        print(c)
        return 0
    end
    args_test(1, 2, c=3)
	public static final fun bubbleSort(arr: list) -> list:
	    n: int = len(arr)

	    for (i in [0...n - 1]):
	        n2: int = n - i
			n1: int = n2 - 2
	        for (j in [0...n1]):
	            aj: int = arr[j]
	            aj1: int = arr[j + 1]

	            if (aj > aj1):
	                arr[j] = aj1
	                arr[j + 1] = aj
	            end
	        end
	    end
	    return arr
	end

	arr: list = [64, 34, 25, 12, 22, 11, 90]
	print(bubbleSort(arr))
	import random
	random_list: list = []
	for (i in [0...10]):
	    random_list += [random.randint(0, 100)]
	end
	random_list.append(int(100))
	print(random_list)
	public static final fun fib(n: int) -> int:
        a = 0
        b = 1
        for (i in range(2, n + 1)):
            temp = b
            b = a + b
            a = temp
        end
        return b
    end

    print(fib(52))

	public static final fun fizzbuzz(n: int) -> any:
        output = ""
        if (n % 3 == 0):
            output = output + "Fizz"
        end
        if (n % 5 == 0):
            output = output + "Buzz"
        end
        if (output == ""):
            output = n
        end
        return output
    end

    for (i in [1...100]):
        print(fizzbuzz(i))
    end

    public static final fun isPrime(num: int) -> bool:
        if (num < 2):
            return false
        end
        for (i in [2...num - 1]):
            if (num % i == 0):
                return false
            end
        end
        return true
    end

    for (num in [1...100]):
        print(num, isPrime(num))
    end

    public static final fun factorialIterative(n: int) -> any:
        result: int = 1
        for (i in [1...n]):
            result = result * i
        end
        return result
    end

    public static final fun factorialRecursive(n: int) -> int:
        if (n == 0 || n == 1):
            return 1
        end
        n1: int = n - 1
        n2: int = factorialRecursive(n1)
        return n * n2
    end

    for (num in [1...100]):
        print(num, factorialIterative(num))
        print(num, factorialRecursive(num))
    end

    nested_map = {
        "a": {
            "b": {
                "c": 1
            }
        }
    }
    print(nested_map.flatten())
    nested_list = [1, [2, [3, [4]]]]
    print(nested_list.flatten())

	import config
	styledprint("ALL TESTS PASSED", config.get_color("info"))
    return 0
end