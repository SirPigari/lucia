testInt: int = 0
testFloat: float = 0.0
testStr: str = "test"
testBool: bool = true
testList: list = [1, 2, 3]
testMap: map = {"a": 1, "b": 2}
testAny: any = "test"
testVoid: void = null
testNull: null = null
testObject: object = object Object: end
testFunction: function = fun test() -> int: return 0 end
testFunctionWithArgs: function = fun test(a: int, b: int) -> int: return a + b end
testFunctionWithDefaultArgs: function = fun test(a: int, b: int, c: int=10) -> int: return a + b + c end
testVariableFinal: int | final = 0
testVariableStatic: int | static = 0
testVariablePublic: int | public = 0
testVariablePrivate: int | private = 0
testVariableMutable: int | mutable = 0
testVariableNonStatic: int | non-static = 0
testVariableAllMods: int | public static final = 0


public static final fun test() -> int: return 0 end

private static final fun youCantCallMeLol() -> int: print("you cant call me lol") end

public static final fun youCanCallMe() -> int: print("you can call me") return 0 end

public static final fun testCBlock() -> int:
    C:
        #include <stdio.h>
        int main() {
            printf("Hello from C\n");
            return 0;
        }
    end

    hello_string: str = "Hello from C"

    C:
        #include <stdio.h>
        int main() {
            printf("%s\n", ${hello_string});
            return 0;
        }
    end

    C:
        #include <stdio.h>
        #include <stdbool.h>

        int main() {
            int i = 0;
            char *str = "Hello from C";
            float f = 3.14;
            bool b = true;

            export_int("i", i);
            export_string("str", str);
            export_float("f", f);
            export_bool("b", b);
            export_flush();

            return 0;
        }
    end

    print(i)
    print(str)
    print(f)
    print(b)

    return 0
end

public static final fun testPYBlock() -> int:
    PY:
        import math
        print(math.sqrt(4))
        print(math.pi)
    end

    return 0
end

public static final fun testIndex() -> void:
    l: list = [1, 2, 3]
    m: map = {"a": 1, "b": 2}

    print(l[0])
    print(m["a"])

    m["c"] = 3

    print(m["c"])
    print(m["a"] + m["b"] + m["c"])

    forget m["c"]

    print(len(m))

    return null
end

public static final fun testFString() -> void:
    a: int = 1
    b: int = 2
    c: str = "test"
    d: float = 3.14

    print(f"Expected: 1; 2; test; 3.14 Got: {a}; {b}; {c}; {d}")

    return null
end

public static final fun testFunctionCalls() -> int:
    private static mutable fun t() -> int:
        return 0
    end
    print(t())
    fun t(a, b) -> int:
        return a + b
    end
    print(t(2, 5))
    fun t(a, b=5) -> int:
        return a + b
    end
    print(t(2))
    fun t(a=2, b=5) -> int:
        return a + b
    end
    print(t())
    return 0
end

public static final fun testImports() -> void:
	import config

	envPath: str = config.get("home_dir", "")

	import math as m
	import isPrime from "Docs/examples/isPrime.lc"
	print(m.sqrt(4))
	print(m.PI)

	print(isPrime.isPrime(5))

	import bubbleSort from "Docs/examples/bubbleSort.lc" as bl

	arr: list = [64, 34, 25, 12, 22, 11, 90]
	print(bl.bubbleSort(arr))

	print(config.get_config("home_dir", ""))
	print(config.debug)
	return null
end

public static final fun testLibs() -> int:
    import config
    import math
    import random
    import os
    import console
    import python

    // config
    print(config.get("debug"))

    // math
    print(math.sqrt(4))
    print(math.PI)

    // random
    print(random.randint(0, 100))
    print(random.choice([1, 2, 3, 4, 5]))
    print(random.shuffle([1, 2, 3, 4, 5]))
    print(random.seed(10))

    // os
    print(os.getcwd())

    // console
    print(console.info("test"))

    // python
    print(python.pyeval("print('hello from python')"))
    print(python.pyexec("print('hello from python')"))
    print(python.pybool(null))
    print(python.pytype(1))
    print(python.pytype(1.0))

    return 0
end

public static final fun testOperators() -> void:
    a: int = 1
    b: int = 2
    l: list = [1, 2, 3]
    m: map = {"a": 1, "b": 2}

    print(a >= b)
    print(a <= b)
    print(a == b)
    print(a != b)
    print(a += b)
    print(a -= b)
    print(a *= b)
    print(a /= b)
    print(a + b)
    print(a - b)
    print(a ^ b)
    print(a * b)
    print(a / b)
    print(a > b)
    print(a < b)
    print(!a)
    print(a % b)
    print(a || b)
    print(a && b)
    print(|-a|)
    print(a ~ l)
    print(a ~ m)

    print(a in l)
    print(a in m)
    print(a or l)
    print(a and l)
    print(not a)
    print(a isn't b)
    print(a isnt b)
    print(a is b)
    print(a xor b)
    print(a xnor b)
    print(a nein b)
    print(nein a)

    return null
end

public static final fun testIterative(n: int) -> int:
	i: int = 0
	while (i < n):
		i += 1
	end
	for (j in [0...n]):
		i += j
	end
	return i
end

public static final fun testRecursive(n: int) -> int:
	if (n == 0):
		return 0
	end
	return n + test_recursive(n - 1)
end

public static final fun testAll() -> int:
    // tests many features of the language
    setprec(1000)

    #alias function -> fun
    function testFunction() -> int: return 0 end

    expect(testFunction(), 0)  // Expected result: 0

    #del function
    #config debug = true
    #config debug reset
    i: int = 0
    try:
        i = "a"
    end catch (e):
        print(e)
    end

    // Test functions with expected results
    expect(testOperators(), null)  // Example expected result
    expect(testLibs(), 0)  // Example expected result
    expect(testFunctionCalls(), 0)  // Example expected result
    expect(testIndex(), null)  // Example expected result
    expect(testFString(), null)  // Example expected result
    expect(testCBlock(), 0)  // Example expected result
    expect(testPYBlock(), 0)  // Example expected result (no return)

    testImports()
    forget i
    i: any = "test"
    print(i)
    expect(i + "ing", "testing")  // Expected result for string concatenation

    // Boolean checks
    expect(0 > -1, true)  // True expected result
    expect(0 < -1, false)  // False expected result

    // Iterating with expected results (no error expected)
    for (i in [0...10]):
        expect(print(i))  // Expected no error
    end

    // Map assignments and checks
    m = {}
    m["a"] = 1
    m["b"] = 2
    expect(m["a"], 1)  // Expected value: 1
    expect(m["b"], 2)  // Expected value: 2
    print(m)

    // Test exception handling
    Exception TestException
    Warning TestWarning
    try:
        throw "test" from TestException
    end catch (e):
        expect(print(e), "test")  // Expected exception message: "test"
        expect(print(e.__type__))  // Expected exception type
    end

    throw "TEST WARNING" from TestWarning
    try:
        throw "test"
    end catch (e):
        expect(print(e), "test")  // Expected result: "test"
    end

    // Conditional check
    if (true):
        expect(print("true"), "true")  // Expected output: "true"
    end else:
        expect(print("false"), "false")  // Expected output: "false"
    end

    // Loop test
    while (i < 10):
        i += 1
    end
    expect(i, 10)  // Expected value after loop: 10

    // Test context management
    with (TestContext()) as tc:
        expect(print(tc))  // No expected value or error for context print
        expect(print("test"))  // No expected value or error for print
    end

    // Test library imports
    import math
    expect(math.sqrt(4), 2)  // Expected value: 2
    expect(math.PI, 3.141592653589793)  // Expected value for math.PI

    object O: end
    // Comment and multiline comment

    // Test argument function with default and passed values
    public static final fun args_test(a: int, b: int, c: int=10) -> int:
        expect(a, 1)  // Expected value for argument a
        expect(b, 2)  // Expected value for argument b
        expect(c, 3)  // Expected value for argument c (explicitly passed)
        return 0
    end
    args_test(1, 2, c=3)

    // Test bubble sort function
    public static final fun bubbleSort(arr: list) -> list:
        n: int = len(arr)
        for (i in [0...n - 1]):
            n2: int = n - i
            n1: int = n2 - 2
            for (j in [0...n1]):
                aj: int = arr[j]
                aj1: int = arr[j + 1]
                if (aj > aj1):
                    arr[j] = aj1
                    arr[j + 1] = aj
                end
            end
        end
        return arr
    end

    arr: list = [64, 34, 25, 12, 22, 11, 90]
    expect(bubbleSort(arr), [11, 12, 22, 25, 34, 64, 90])  // Expected sorted array

    // Test random number generation
    import random
    random_list: list = []
    for (i in [0...10]):
        random_list += [random.randint(0, 100)]
    end
    random_list.append(int(100))
    expect(random_list)  // Example random list

    // Test Fibonacci function
    public static final fun fib(n: int) -> int:
        t1: float = (1 + math.sqrt(5))
        t2: float = (1 - math.sqrt(5))
        t1: float = t1 / 2
        t2: float = t2 / 2
        t3: float = math.sqrt(5)

        t4: float = (t1 ^ n) - (t2 ^ n)
        t5: float = t4 / t3

        return int(t5)
    end

    // Example of how to use the Fibonacci function
    expect(fib(52), 32951280099)  // Expected value for fib(52)

    // Test fizzbuzz function
    public static final fun fizzbuzz(n: int) -> any:
        output = ""
        if (n % 3 == 0):
            output = output + "Fizz"
        end
        if (n % 5 == 0):
            output = output + "Buzz"
        end
        if (output == ""):
            output = n
        end
        return output
    end

    for (i in [1...100]):
        expect(fizzbuzz(i))  // Pass expected output for FizzBuzz
    end

    // Test prime check function
    public static final fun isPrime(num: int) -> bool:
        if (num < 2):
            return false
        end
        for (i in [2...num - 1]):
            if (num % i == 0):
                return false
            end
        end
        return true
    end

    for (num in [1...100]):
        expect(isPrime(num))  // Pass expected prime check results
    end

    // Test factorial functions
    public static final fun factorialIterative(n: int) -> any:
        result: int = 1
        for (i in [1...n]):
            result = result * i
        end
        return result
    end

    public fun factorialRecursive(n: int) -> int:
        if (n <= 1):
            return 1
        end
        return n * factorialRecursive(n - 1)
    end

    for (num in [1...100]):
        expect(factorialIterative(num), factorialRecursive(num))  // Pass expected values
    end

    // Test flatten for maps and lists
    nested_map = {
        "a": {
            "b": {
                "c": 1
            }
        }
    }
    expect(nested_map.flatten(), {"a_b_c": 1})  // Example expected result for flatten map
    expect(nested_map.flattenToList())  // Example expected result for flatten map

    nested_list = [1, [2, [3, [4]]]]
    expect(nested_list.flatten(), [1, 2, 3, 4])  // Example expected result for flatten list

    import config
    styledprint("ALL TESTS PASSED", config.get_color("info"))
    return 0
end
